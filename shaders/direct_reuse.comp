#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_ray_query : enable
#extension GL_ARB_shader_clock : enable                 // Using clockARB
#extension GL_EXT_shader_image_load_formatted : enable  // The folowing extension allow to pass images as function parameters

#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require

#define DEBUG_SAVE(x) imageStore(thisDirectResultImage, imageCoords, vec4(x, 1.0)); return;

#include "host_device.h"

layout(push_constant) uniform _RtxState {
  RtxState rtxState;
};

#include "globals.glsl"

PtPayload prd;
ShadowHitPayload shadow_payload;
ivec2 imageCoords;

#include "layouts.glsl"
#include "random.glsl"
#include "common.glsl"
#include "traceray_rq.glsl"

#include "pathtrace.glsl"

#define FIREFLIES 1

#ifndef SWIZZLED
layout(local_size_x = 8, local_size_y = 8) in;
#else
layout(local_size_x = 32, local_size_y = 2) in;
#extension GL_EXT_shader_8bit_storage : enable  // Using uint_8 ...
ivec2 SampleSizzled() {
  // Sampling Swizzling
  // Convert 32x2 to 8x8, where the sampling will follow how invocation are done in a subgroup.
  // layout(local_size_x = 32, local_size_y = 2) in;
  ivec2 base = ivec2(gl_WorkGroupID.xy) * 8;
  ivec2 subset = ivec2(int(gl_LocalInvocationID.x) & 1, int(gl_LocalInvocationID.x) / 2);
  subset += gl_LocalInvocationID.x >= 16 ? ivec2(2, -8) : ivec2(0, 0);
  subset += ivec2(gl_LocalInvocationID.y * 4, 0);
  return base + subset;
}
#endif

bool findTemporalNeighbor(
    vec3 norm, float depth, float reprojDepth, uint matId, ivec2 lastCoord, out DirectReservoir resv
) {
    vec3 pnorm; float pdepth; uint matHash;
    
    if (!inBound(lastCoord, ivec2(2, 0), rtxState.size)) {
        return false;
    }
    loadLastGeometryInfo(lastCoord, pnorm, pdepth, matHash);
    if (inBound(lastCoord, rtxState.size)) {
        if (hash8bit(matId) == matHash) {
            if (dot(norm, pnorm) > 0.9 && reprojDepth < pdepth * 1.05) {
                resv = lastDirectResv[lastCoord.y * rtxState.size.x + lastCoord.x];
                return true;
            }
        }
    }
    /*
    for (int i = -1; i <= 1; i++) {
        for (int j = -1; j <= 1; j++) {
            ivec2 coord = iLastCoord + ivec2(i, j);
            loadLastGeometryInfo(coord, pnorm, pdepth, matHash);
            if (!inBound(coord, ivec2(2, 0), rtxState.size)) {
                continue;
            }
            else if (hash8bit(matId) != matHash)
                continue;
            else if (dot(norm, pnorm) < 0.9 || reprojDepth > pdepth * 1.05) {
                continue;
            }
            resv = lastDirectResv[coord.y * rtxState.size.x + coord.x];
            //resv = lastDirectResv[iLastCoord.y * rtxState.size.x + iLastCoord.x];
            return true;
        }
    }
    */
    return false;
}

vec3 PHatDirect(DirectReservoir resv, State state, vec3 wo) {
    return resv.lightSample.Li * Eval(state, wo, state.ffnormal, resv.lightSample.wi, dummyPdf) *
        absDot(state.ffnormal, resv.lightSample.wi);
}

float BigWDirect(DirectReservoir resv, State state, vec3 wo) {
    return resv.weight / (resvToScalar(PHatDirect(resv, state, wo)) * float(resv.num));
}

void main() {
  imageCoords = ivec2(gl_GlobalInvocationID.xy);  //SampleSizzled();
  if (imageCoords.x >= rtxState.size.x || imageCoords.y >= rtxState.size.y) {
    return;
  }
  int index = imageCoords.y * rtxState.size.x + imageCoords.x;

  prd.seed = tea(index + rtxState.size.x * rtxState.size.y, rtxState.time);
  Ray ray = raySpawn(imageCoords, rtxState.size);

  State state;
  float depth;
  if (!getDirectStateFromGBuffer(thisGbuffer, ray, state, depth)) {
    imageStore(thisDirectResultImage, imageCoords, vec4(0.0));
    return;
  }
  state.mat.albedo = vec3(1.0);

  vec3 direct = vec3(0.0);
  DirectReservoir resv = thisDirectResv[index];

  LightSample lsample = resv.lightSample;
  vec3 wo = -ray.direction;
  ivec2 motionIdx = imageLoad(motionVector, imageCoords).xy;

  if (rtxState.ReSTIRState == eTemporal || rtxState.ReSTIRState == eSpatiotemporal) {
    float reprojDepth = length(sceneCamera.lastPosition - state.position);
    DirectReservoir temporal;

    if (findTemporalNeighbor(state.normal, depth, reprojDepth, state.matID, motionIdx, temporal)) {
      if (!resvInvalid(temporal)) {
        resvMerge(resv, temporal, rand(prd.seed));
      }
    }
  }

  if (!resvInvalid(resv)) {
    vec3 LiBSDF = lsample.Li * Eval(state, wo, state.ffnormal, lsample.wi, dummyPdf);
    //DEBUG_SAVE(vec3(resv.weight) / float(resv.num))
    //direct = LiBSDF / resvToScalar(LiBSDF) * resv.weight / float(resv.num);
    //direct = vec3(resv.weight) / float(resv.num);
    direct = lsample.Li;
  }
  resvClamp(resv, rtxState.RISSampleNum * rtxState.reservoirClamp);
  resvCheckValidity(resv);

  if (isnan(direct.x) || isnan(direct.y) || isnan(direct.z)) {
    direct = vec3(0.0);
  }
  thisDirectResv[index] = resv;
  imageStore(thisDirectResultImage, imageCoords, vec4(HDRToLDR(clampRadiance(direct)), 1.0));
}